stages:
  - build-env-default
  - build-env-full
  - build-and-test
  - compiler-warnings

.execution-conditions: &execution-conditions
  only:
    refs:
      - merge_requests
      - master
      - tags
    changes:
      - "**/*"
      - .dockerignore
      - .gitmodules
      - .gitlab-ci.yml
      - CMakeLists.txt
    variables:
      - $CI_MERGE_REQUEST_TITLE !~ /^WIP:.*/

.build-env-template: &build-env-template
  <<: *execution-conditions
  stage: build-env
  image: docker:19.03.6

.build-and-test-template: &build-and-test-template
  <<: *execution-conditions
  stage: build-and-test
  image: docker:19.03.6
  script:
    - OS_VERSION=$(echo $CI_JOB_NAME | cut -d- -f 1)
    - BUILD_TYPE=$(echo $CI_JOB_NAME | cut -d- -f 2)
    - export CCACHE_DIR=/cache/nektar/$OS_VERSION/
    - export NUM_CPUS=3
    - export CONTAINER_NAME=test-$CI_JOB_ID
    - export ENV_NAME=env-${OS_VERSION}-${BUILD_TYPE}
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$ENV_NAME
    - sed "s %%BASE_IMAGE%% $CI_REGISTRY_IMAGE:$ENV_NAME g" .gitlab-ci/Dockerfile_add_repo > Dockerfile_tmp
    - export ENV_IMAGE=$(docker build -q -f Dockerfile_tmp .)
    - mkdir -p log
    - docker run --name $CONTAINER_NAME -v ccache:/cache
      -e "BUILD_TYPE=$BUILD_TYPE"
      -e "NUM_CPUS=$NUM_CPUS"
      -e "CCACHE_DIR=$CCACHE_DIR"
      $ENV_IMAGE
      bash -x .gitlab-ci/build-and-test.sh |
      tee log/${OS_VERSION}_${BUILD_TYPE}.log || true
    - exit_code=$(docker wait $CONTAINER_NAME)
    - >
        echo "Container exit code: $exit_code"
    - if [ $exit_code -ne 0 ];
      then
        export FAIL_IMAGE=$CI_REGISTRY_IMAGE:pipeline_${CI_PIPELINE_ID}_${OS_VERSION}_${BUILD_TYPE};
        echo FAIL $FAIL_IMAGE;
        docker commit $CONTAINER_NAME $FAIL_IMAGE;
        docker push $FAIL_IMAGE; 
        docker rmi $FAIL_IMAGE;
      fi
    - docker rm $CONTAINER_NAME
    - exit $exit_code;
  artifacts:
    paths:
      - log/

.compiler-warning-template: &compiler-warning-template
  <<: *execution-conditions
  stage: compiler-warnings
  variables:
    WARNING_REGEX: '.*warning[: ].*'
    GIT_STRATEGY: none
  script:
    - export OS=$(echo $CI_JOB_NAME | cut -d- -f 1)
    - export BUILD_TYPE=$(echo $CI_JOB_NAME | cut -d- -f 2)
    - export LOG_FILE="log/${OS}_${BUILD_TYPE}.log"
    - if [ $(grep -c "$WARNING_REGEX" $LOG_FILE) -ne 0 ];
      then
      grep --colour=always -A 1 -B 1 -0 "$WARNING_REGEX" $LOG_FILE;
        exit 1;
      fi
  allow_failure: true

################################################
###################  DEBIAN  ###################
################################################

.build-env-debian-template-default: &build-env-debian-template-default
  <<: *build-env-template
  stage:
    build-env-default
  variables:
    OS_DISTRO: debian
  script:
    - OS_VERSION=$(echo $CI_JOB_NAME | cut -d- -f 1)
    - BUILD_TYPE=$(echo $CI_JOB_NAME | cut -d- -f 2)
    - sed -e "s %%OS_VERSION%% $OS_VERSION g" -e "s %%REGISTRY%% $CI_REGISTRY_IMAGE g" docker/nektar-env/Dockerfile_${OS_DISTRO}_${BUILD_TYPE} > Dockerfile
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - export IMAGE=$CI_REGISTRY_IMAGE:env-${OS_VERSION}-${BUILD_TYPE}
    - docker pull $IMAGE || true
    - docker build --pull -t $IMAGE .
    - docker push $IMAGE

.build-env-debian-template-full: &build-env-debian-template-full
  <<: *build-env-debian-template-default
  stage:
    build-env-full

buster-default-build-env:
  <<: *build-env-debian-template-default

buster-full-build-env:
  <<: *build-env-debian-template-full

stretch-default-build-env:
  <<: *build-env-debian-template-default

stretch-full-build-env:
  <<: *build-env-debian-template-full

buster-default-build-and-test:
  <<: *build-and-test-template

buster-full-build-and-test:
  <<: *build-and-test-template
  variables:
    OS_DISTRO: debian
    GIT_SUBMODULE_STRATEGY: recursive

stretch-default-build-and-test:
  <<: *build-and-test-template

stretch-full-build-and-test:
  <<: *build-and-test-template


# COMPILER WARNINGS
buster-default-warnings:
  <<: *compiler-warning-template

buster-full-warnings:
  <<: *compiler-warning-template

stretch-default-warnings:
  <<: *compiler-warning-template

stretch-full-warnings:
  <<: *compiler-warning-template


buster-documentation-build-env:
  <<: *execution-conditions
  image: docker:19.03.6
  stage:
    build-env-full
  script:
    - export IMAGE=$CI_REGISTRY_IMAGE:env-documentation
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - sed -e "s %%BASE_IMAGE%% $CI_REGISTRY_IMAGE g" docker/nektar-env/Dockerfile_debian_documentation > Dockerfile
    - docker pull $IMAGE || true
    - docker build --pull -t $IMAGE .
    - docker push $IMAGE

.build-documentation-template: &build-documentation-template
  <<: *build-and-test-template
  image: $CI_REGISTRY_IMAGE:env-documentation

user-guide-build:
  <<: *build-documentation-template
  script:
    - cmake -Bbuild -DCMAKE_BUILD_TYPE:STRING=Release -DNEKTAR_BUILD_LIBRARY:BOOL=OFF -DNEKTAR_BUILD_SOLVERS:BOOL=OFF -DNEKTAR_BUILD_UTILITIES:BOOL=OFF -DNEKTAR_BUILD_TESTS:BOOL=OFF -DNEKTAR_BUILD_DOC:BOOL=ON .
    - make -C build -j 3 user-guide-pdf user-guide-html developer-guide-pdf developer-guide-html
  artifacts:
    paths:
      - build/docs/user-guide/user-guide.pdf
      - build/docs/user-guide/html
      - build/docs/developer-guide/developers-guide.pdf
      - build/docs/developer-guide/html

doxygen-build:
  <<: *build-documentation-template
  script:
    - cmake -Bbuild -DCMAKE_BUILD_TYPE:STRING=Release -DNEKTAR_BUILD_LIBRARY:BOOL=OFF -DNEKTAR_BUILD_SOLVERS:BOOL=OFF -DNEKTAR_BUILD_UTILITIES:BOOL=OFF -DNEKTAR_BUILD_TESTS:BOOL=OFF -DNEKTAR_BUILD_DOC:BOOL=ON .
    - make -C build doc
  artifacts:
    paths:
      - build/docs/doxygen/html/

tutorials-build:
  <<: *build-documentation-template
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - cmake -Bbuild -DCMAKE_BUILD_TYPE:STRING=Release .
    - make -C build -j 2 tutorials-pdf tutorials-html
  artifacts:
    paths:
      - build/docs/tutorial/



################################################
###################  UBUNTU  ###################
################################################

.build-env-ubuntu-template-default: &build-env-ubuntu-template-default
  <<: *build-env-debian-template-default
  variables:
    OS_DISTRO: ubuntu

.build-env-ubuntu-template-full: &build-env-ubuntu-template-full
  <<: *build-env-ubuntu-template-default
  stage:
    build-env-full
    
bionic-default-build-env:
  <<: *build-env-ubuntu-template-default

bionic-full-build-env:
  <<: *build-env-ubuntu-template-full

xenial-default-build-env:
  <<: *build-env-ubuntu-template-default

xenial-full-build-env:
  <<: *build-env-ubuntu-template-full

trusty-default-build-env:
  <<: *build-env-ubuntu-template-default

trusty-full-build-env:
  <<: *build-env-ubuntu-template-full


bionic-default-build-and-test:
  <<: *build-and-test-template

bionic-full-build-and-test:
  <<: *build-and-test-template

xenial-default-build-and-test:
  <<: *build-and-test-template

xenial-full-build-and-test:
  <<: *build-and-test-template

trusty-default-build-and-test:
  <<: *build-and-test-template

trusty-full-build-and-test:
  <<: *build-and-test-template


# COMPILER WARNINGS
bionic-default-warnings:
  <<: *compiler-warning-template

bionic-full-warnings:
  <<: *compiler-warning-template

xenial-default-warnings:
  <<: *compiler-warning-template

xenial-full-warnings:
  <<: *compiler-warning-template

trusty-default-warnings:
  <<: *compiler-warning-template

trusty-full-warnings:
  <<: *compiler-warning-template

################################################
###################  CENTOS  ###################
################################################

.build-env-centos-template-default: &build-env-centos-template-default
  <<: *build-env-debian-template-default
  variables:
    OS_DISTRO: centos

.build-env-centos-template-full: &build-env-centos-template-full
  <<: *build-env-centos-template-default
  stage:
    build-env-full

centos7-default-build-env:
  <<: *build-env-centos-template-default

centos7-full-build-env:
  <<: *build-env-centos-template-full

centos7-default-build-and-test:
  <<: *build-and-test-template

centos7-full-build-and-test:
  <<: *build-and-test-template


# COMPILER WARNINGS
centos7-default-warnings:
  <<: *compiler-warning-template

centos7-full-warnings:
  <<: *compiler-warning-template


# ################################################
# ####################  OSX  #####################
# ################################################

.build-and-test-osx-template: &build-and-test-osx-template
  <<: *build-and-test-template
  tags:
    - macos
  script:
    - mkdir -p log
    - export OS_VERSION="osx"
    - export NUM_CPUS=8
    - bash -x ./.gitlab-ci/build-and-test.sh |
      tee log/${OS_VERSION}_${BUILD_TYPE}.log


osx-default-build-and-test:
  <<: *build-and-test-osx-template
  variables:
    BUILD_TYPE: "default"

osx-full-build-and-test:
  <<: *build-and-test-osx-template
  variables:
    BUILD_TYPE: "full"


osx-default-warnings:
  <<: *compiler-warning-template

osx-full-warnings:
  <<: *compiler-warning-template


# ################################################
# #################  WINDOWS  ####################
# ################################################

win7-default-build-and-test:
  <<: *build-and-test-template
  tags:
    - win7
  script:
    - $Env:path = "$CI_PROJECT_DIR\build\dist\bin;$CI_PROJECT_DIR\ThirdParty;" + $Env:path
    - echo $Env:path
    - mkdir build
    - cd build
    - cmake.exe -G "Visual Studio 12 2013 Win64" --config Debug ..
    - cmake.exe --build . --target ALL_BUILD --config Debug
    - cmake.exe --build . --target INSTALL --config Debug
    - ctest --output-on-failure -C Debug -j3


win10-default-build-and-test:
  <<: *build-and-test-template
  tags:
    - win10
  script:
    - $Env:path = "$CI_PROJECT_DIR\build\dist\bin;$CI_PROJECT_DIR\ThirdParty;$CI_PROJECT_DIR\build\ThirdParty\dist\bin;" + $Env:path
    - echo $Env:path
    - mkdir build
    - cd build
    - cmake.exe -G "Visual Studio 14 2015 Win64" --config Debug ..
    - cmake.exe --build . --target ALL_BUILD --config Debug
    - cmake.exe --build . --target INSTALL --config Debug
    - ctest --output-on-failure -C Debug -j3
